import os
import json
import urllib.request
import urllib.parse
import re

def _rewrite_buy_lines(msg: str) -> str:
    out = []
    for line in msg.splitlines():
        # remove leading bullets/emojis/punctuation for matching
        headless = re.sub(r'^\W+', '', line.strip(), flags=re.UNICODE)
        if re.fullmatch(r'(?i)buy[:\-]*\s*', headless):
            out.append('Buy at current price')
        else:
            out.append(line)
    return "\n".join(out)

def lambda_handler(event, context):
    try:
        body_raw = event.get("body", "") or ""
        if body_raw.startswith('{"') and body_raw.endswith('}'):
            body = json.loads(body_raw)
            msg = body["message"]
        else:
            msg = body_raw

        # >>> apply the rewrite here <<<
        msg = _rewrite_buy_lines(msg)

        bot_token = os.getenv("BOT_TOKEN")
        chat_id = os.getenv("CHAT_ID")
        if not bot_token or not chat_id:
            return {"statusCode": 500, "body": "Missing BOT_TOKEN or CHAT_ID"}

        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = urllib.parse.urlencode({"chat_id": chat_id, "text": msg}).encode()
        req = urllib.request.Request(url, data=data, method='POST')
        with urllib.request.urlopen(req, timeout=10) as response:
            if response.status != 200:
                raise Exception(f"Telegram API returned status {response.status}")
        return {"statusCode": 200, "body": "ok"}

    except Exception as error:
        return {"statusCode": 500, "body": f"Error: {str(error)}"}
