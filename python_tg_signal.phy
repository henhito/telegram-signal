import os
import json
import urllib.request
import urllib.parse

def lambda_handler(event, context):
    print("üö® LAMBDA STARTED")
    
    try:
        body_raw = event.get("body", "")
        print(f"üîç RAW BODY: {body_raw}")
        print(f"üîç BODY TYPE: {type(body_raw)}")
        
        # Handle both JSON and plain text from TradingView
        if body_raw.startswith('{"') and body_raw.endswith('}'):
            # It's JSON format (like your curl tests)
            print("üìÑ PARSING AS JSON")
            body = json.loads(body_raw)
            msg = body["message"]
        else:
            # It's plain text from TradingView (like your actual alerts)
            print("üìÑ USING PLAIN TEXT FROM TRADINGVIEW")
            msg = body_raw
        
        print(f"‚úÖ FINAL MESSAGE: {msg}")

        bot_token = os.getenv("BOT_TOKEN")
        chat_id = os.getenv("CHAT_ID")
        
        if not bot_token or not chat_id:
            return {"statusCode": 500, "body": "Missing BOT_TOKEN or CHAT_ID"}

        # Send to Telegram
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = urllib.parse.urlencode({"chat_id": chat_id, "text": msg}).encode()
        
        req = urllib.request.Request(url, data=data, method='POST')
        with urllib.request.urlopen(req, timeout=10) as response:
            if response.status != 200:
                raise Exception(f"Telegram API returned status {response.status}")
        
        print("‚úÖ TELEGRAM MESSAGE SENT SUCCESSFULLY")
        return {"statusCode": 200, "body": "ok"}

    except Exception as error:
        print(f"‚ùå ERROR: {str(error)}")
        return {"statusCode": 500, "body": f"Error: {str(error)}"}
